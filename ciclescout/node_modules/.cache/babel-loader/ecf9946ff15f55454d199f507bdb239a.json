{"ast":null,"code":"var _jsxFileName = \"/Users/diego.maranges/Documents/Scout/Scout-Page/todo-react-redux/src/views/pages/tasks/tasks-page.js\";\nimport React, { Component } from 'react';\nimport { List } from 'immutable';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { getNotification, notificationActions } from 'src/notification';\nimport { getTaskFilter, getVisibleTasks, tasksActions } from 'src/tasks';\nimport Notification from '../../components/notification';\nimport TaskFilters from '../../components/task-filters';\nimport TaskForm from '../../components/task-form';\nimport TaskList from '../../components/task-list';\nexport class TasksPage extends Component {\n  componentWillMount() {\n    this.props.loadTasks();\n    this.props.filterTasks(this.getFilterParam(this.props.location.search));\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.location.search !== this.props.location.search) {\n      this.props.filterTasks(this.getFilterParam(nextProps.location.search));\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.unloadTasks();\n  }\n\n  getFilterParam(search) {\n    const params = new URLSearchParams(search);\n    return params.get('filter');\n  }\n\n  renderNotification() {\n    const notification = this.props.notification;\n    return React.createElement(Notification, {\n      action: this.props.undeleteTask,\n      actionLabel: notification.actionLabel,\n      dismiss: this.props.dismissNotification,\n      display: notification.display,\n      message: notification.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"g-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"g-col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(TaskForm, {\n      handleSubmit: this.props.createTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"g-col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(TaskFilters, {\n      filter: this.props.filterType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(TaskList, {\n      removeTask: this.props.removeTask,\n      tasks: this.props.tasks,\n      updateTask: this.props.updateTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })), this.props.notification.display ? this.renderNotification() : null);\n  }\n\n} //=====================================\n//  CONNECT\n//-------------------------------------\n\nTasksPage.propTypes = {\n  createTask: PropTypes.func.isRequired,\n  dismissNotification: PropTypes.func.isRequired,\n  filterTasks: PropTypes.func.isRequired,\n  filterType: PropTypes.string.isRequired,\n  loadTasks: PropTypes.func.isRequired,\n  location: PropTypes.object.isRequired,\n  notification: PropTypes.object.isRequired,\n  removeTask: PropTypes.func.isRequired,\n  tasks: PropTypes.instanceOf(List).isRequired,\n  undeleteTask: PropTypes.func.isRequired,\n  unloadTasks: PropTypes.func.isRequired,\n  updateTask: PropTypes.func.isRequired\n};\nconst mapStateToProps = createSelector(getNotification, getTaskFilter, getVisibleTasks, (notification, filterType, tasks) => ({\n  notification,\n  filterType,\n  tasks\n}));\nconst mapDispatchToProps = Object.assign({}, tasksActions, notificationActions);\nexport default connect(mapStateToProps, mapDispatchToProps)(TasksPage);","map":{"version":3,"sources":["/Users/diego.maranges/Documents/Scout/Scout-Page/todo-react-redux/src/views/pages/tasks/tasks-page.js"],"names":["React","Component","List","PropTypes","connect","createSelector","getNotification","notificationActions","getTaskFilter","getVisibleTasks","tasksActions","Notification","TaskFilters","TaskForm","TaskList","TasksPage","componentWillMount","props","loadTasks","filterTasks","getFilterParam","location","search","componentWillReceiveProps","nextProps","componentWillUnmount","unloadTasks","params","URLSearchParams","get","renderNotification","notification","undeleteTask","actionLabel","dismissNotification","display","message","render","createTask","filterType","removeTask","tasks","updateTask","propTypes","func","isRequired","string","object","instanceOf","mapStateToProps","mapDispatchToProps","Object","assign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { List } from 'immutable';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { getNotification, notificationActions } from 'src/notification';\nimport { getTaskFilter, getVisibleTasks, tasksActions } from 'src/tasks';\nimport Notification from '../../components/notification';\nimport TaskFilters from '../../components/task-filters';\nimport TaskForm from '../../components/task-form';\nimport TaskList from '../../components/task-list';\n\n\nexport class TasksPage extends Component {\n  static propTypes = {\n    createTask: PropTypes.func.isRequired,\n    dismissNotification: PropTypes.func.isRequired,\n    filterTasks: PropTypes.func.isRequired,\n    filterType: PropTypes.string.isRequired,\n    loadTasks: PropTypes.func.isRequired,\n    location: PropTypes.object.isRequired,\n    notification: PropTypes.object.isRequired,\n    removeTask: PropTypes.func.isRequired,\n    tasks: PropTypes.instanceOf(List).isRequired,\n    undeleteTask: PropTypes.func.isRequired,\n    unloadTasks: PropTypes.func.isRequired,\n    updateTask: PropTypes.func.isRequired\n  };\n\n  componentWillMount() {\n    this.props.loadTasks();\n    this.props.filterTasks(\n      this.getFilterParam(this.props.location.search)\n    );\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.location.search !== this.props.location.search) {\n      this.props.filterTasks(\n        this.getFilterParam(nextProps.location.search)\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.unloadTasks();\n  }\n\n  getFilterParam(search) {\n    const params = new URLSearchParams(search);\n    return params.get('filter');\n  }\n\n  renderNotification() {\n    const { notification } = this.props;\n    return (\n      <Notification\n        action={this.props.undeleteTask}\n        actionLabel={notification.actionLabel}\n        dismiss={this.props.dismissNotification}\n        display={notification.display}\n        message={notification.message}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"g-row\">\n        <div className=\"g-col\">\n          <TaskForm handleSubmit={this.props.createTask} />\n        </div>\n\n        <div className=\"g-col\">\n          <TaskFilters filter={this.props.filterType} />\n          <TaskList\n            removeTask={this.props.removeTask}\n            tasks={this.props.tasks}\n            updateTask={this.props.updateTask}\n          />\n        </div>\n\n        {this.props.notification.display ? this.renderNotification() : null}\n      </div>\n    );\n  }\n}\n\n\n//=====================================\n//  CONNECT\n//-------------------------------------\n\nconst mapStateToProps = createSelector(\n  getNotification,\n  getTaskFilter,\n  getVisibleTasks,\n  (notification, filterType, tasks) => ({\n    notification,\n    filterType,\n    tasks\n  })\n);\n\nconst mapDispatchToProps = Object.assign(\n  {},\n  tasksActions,\n  notificationActions\n);\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TasksPage);\n"]},"metadata":{},"sourceType":"module"}