{"ast":null,"code":"import { getDeletedTask } from './selectors';\nimport { taskList } from './task-list';\nimport { CREATE_TASK_ERROR, CREATE_TASK_SUCCESS, REMOVE_TASK_ERROR, REMOVE_TASK_SUCCESS, FILTER_TASKS, LOAD_TASKS_SUCCESS, UNDELETE_TASK_ERROR, UNLOAD_TASKS_SUCCESS, UPDATE_TASK_ERROR, UPDATE_TASK_SUCCESS } from './action-types';\nexport function createTask(title) {\n  return dispatch => {\n    taskList.push({\n      completed: false,\n      title\n    }).catch(error => dispatch(createTaskError(error)));\n  };\n}\nexport function createTaskError(error) {\n  return {\n    type: CREATE_TASK_ERROR,\n    payload: error\n  };\n}\nexport function createTaskSuccess(task) {\n  return {\n    type: CREATE_TASK_SUCCESS,\n    payload: task\n  };\n}\nexport function removeTask(task) {\n  return dispatch => {\n    taskList.remove(task.key).catch(error => dispatch(removeTaskError(error)));\n  };\n}\nexport function removeTaskError(error) {\n  return {\n    type: REMOVE_TASK_ERROR,\n    payload: error\n  };\n}\nexport function removeTaskSuccess(task) {\n  return {\n    type: REMOVE_TASK_SUCCESS,\n    payload: task\n  };\n}\nexport function undeleteTask() {\n  return (dispatch, getState) => {\n    const task = getDeletedTask(getState());\n\n    if (task) {\n      taskList.set(task.key, {\n        completed: task.completed,\n        title: task.title\n      }).catch(error => dispatch(undeleteTaskError(error)));\n    }\n  };\n}\nexport function undeleteTaskError(error) {\n  return {\n    type: UNDELETE_TASK_ERROR,\n    payload: error\n  };\n}\nexport function updateTaskError(error) {\n  return {\n    type: UPDATE_TASK_ERROR,\n    payload: error\n  };\n}\nexport function updateTask(task, changes) {\n  return dispatch => {\n    taskList.update(task.key, changes).catch(error => dispatch(updateTaskError(error)));\n  };\n}\nexport function updateTaskSuccess(task) {\n  return {\n    type: UPDATE_TASK_SUCCESS,\n    payload: task\n  };\n}\nexport function loadTasksSuccess(tasks) {\n  return {\n    type: LOAD_TASKS_SUCCESS,\n    payload: tasks\n  };\n}\nexport function filterTasks(filterType) {\n  return {\n    type: FILTER_TASKS,\n    payload: {\n      filterType\n    }\n  };\n}\nexport function loadTasks() {\n  return (dispatch, getState) => {\n    const _getState = getState(),\n          auth = _getState.auth;\n\n    taskList.path = \"tasks/\".concat(auth.id);\n    taskList.subscribe(dispatch);\n  };\n}\nexport function unloadTasks() {\n  taskList.unsubscribe();\n  return {\n    type: UNLOAD_TASKS_SUCCESS\n  };\n}","map":{"version":3,"sources":["/Users/diego.maranges/Documents/Scout/Scout-Page/todo-react-redux/src/tasks/actions.js"],"names":["getDeletedTask","taskList","CREATE_TASK_ERROR","CREATE_TASK_SUCCESS","REMOVE_TASK_ERROR","REMOVE_TASK_SUCCESS","FILTER_TASKS","LOAD_TASKS_SUCCESS","UNDELETE_TASK_ERROR","UNLOAD_TASKS_SUCCESS","UPDATE_TASK_ERROR","UPDATE_TASK_SUCCESS","createTask","title","dispatch","push","completed","catch","error","createTaskError","type","payload","createTaskSuccess","task","removeTask","remove","key","removeTaskError","removeTaskSuccess","undeleteTask","getState","set","undeleteTaskError","updateTaskError","updateTask","changes","update","updateTaskSuccess","loadTasksSuccess","tasks","filterTasks","filterType","loadTasks","auth","path","id","subscribe","unloadTasks","unsubscribe"],"mappings":"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","sourcesContent":["import { getDeletedTask } from './selectors';\nimport { taskList } from './task-list';\nimport {\n  CREATE_TASK_ERROR,\n  CREATE_TASK_SUCCESS,\n  REMOVE_TASK_ERROR,\n  REMOVE_TASK_SUCCESS,\n  FILTER_TASKS,\n  LOAD_TASKS_SUCCESS,\n  UNDELETE_TASK_ERROR,\n  UNLOAD_TASKS_SUCCESS,\n  UPDATE_TASK_ERROR,\n  UPDATE_TASK_SUCCESS\n} from './action-types';\n\n\nexport function createTask(title) {\n  return dispatch => {\n    taskList.push({completed: false, title})\n      .catch(error => dispatch(createTaskError(error)));\n  };\n}\n\nexport function createTaskError(error) {\n  return {\n    type: CREATE_TASK_ERROR,\n    payload: error\n  };\n}\n\nexport function createTaskSuccess(task) {\n  return {\n    type: CREATE_TASK_SUCCESS,\n    payload: task\n  };\n}\n\nexport function removeTask(task) {\n  return dispatch => {\n    taskList.remove(task.key)\n      .catch(error => dispatch(removeTaskError(error)));\n  };\n}\n\nexport function removeTaskError(error) {\n  return {\n    type: REMOVE_TASK_ERROR,\n    payload: error\n  };\n}\n\nexport function removeTaskSuccess(task) {\n  return {\n    type: REMOVE_TASK_SUCCESS,\n    payload: task\n  };\n}\n\nexport function undeleteTask() {\n  return (dispatch, getState) => {\n    const task = getDeletedTask(getState());\n    if (task) {\n      taskList.set(task.key, {completed: task.completed, title: task.title})\n        .catch(error => dispatch(undeleteTaskError(error)));\n    }\n  };\n}\n\nexport function undeleteTaskError(error) {\n  return {\n    type: UNDELETE_TASK_ERROR,\n    payload: error\n  };\n}\n\nexport function updateTaskError(error) {\n  return {\n    type: UPDATE_TASK_ERROR,\n    payload: error\n  };\n}\n\nexport function updateTask(task, changes) {\n  return dispatch => {\n    taskList.update(task.key, changes)\n      .catch(error => dispatch(updateTaskError(error)));\n  };\n}\n\nexport function updateTaskSuccess(task) {\n  return {\n    type: UPDATE_TASK_SUCCESS,\n    payload: task\n  };\n}\n\nexport function loadTasksSuccess(tasks) {\n  return {\n    type: LOAD_TASKS_SUCCESS,\n    payload: tasks\n  };\n}\n\nexport function filterTasks(filterType) {\n  return {\n    type: FILTER_TASKS,\n    payload: {filterType}\n  };\n}\n\nexport function loadTasks() {\n  return (dispatch, getState) => {\n    const { auth } = getState();\n    taskList.path = `tasks/${auth.id}`;\n    taskList.subscribe(dispatch);\n  };\n}\n\nexport function unloadTasks() {\n  taskList.unsubscribe();\n  return {\n    type: UNLOAD_TASKS_SUCCESS\n  };\n}\n"]},"metadata":{},"sourceType":"module"}