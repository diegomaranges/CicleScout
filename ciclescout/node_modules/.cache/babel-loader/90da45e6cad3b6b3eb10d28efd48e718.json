{"ast":null,"code":"import { List, Record } from 'immutable';\nimport { SIGN_OUT_SUCCESS } from 'src/auth/action-types';\nimport { CREATE_TASK_SUCCESS, REMOVE_TASK_SUCCESS, FILTER_TASKS, LOAD_TASKS_SUCCESS, UPDATE_TASK_SUCCESS } from './action-types';\nexport const TasksState = new Record({\n  deleted: null,\n  filter: '',\n  list: new List(),\n  previous: null\n});\nexport function tasksReducer(state = new TasksState(), {\n  payload,\n  type\n}) {\n  switch (type) {\n    case CREATE_TASK_SUCCESS:\n      return state.merge({\n        deleted: null,\n        previous: null,\n        list: state.deleted && state.deleted.key === payload.key ? state.previous : state.list.unshift(payload)\n      });\n\n    case REMOVE_TASK_SUCCESS:\n      return state.merge({\n        deleted: payload,\n        previous: state.list,\n        list: state.list.filter(task => task.key !== payload.key)\n      });\n\n    case FILTER_TASKS:\n      return state.set('filter', payload.filterType || '');\n\n    case LOAD_TASKS_SUCCESS:\n      return state.set('list', new List(payload.reverse()));\n\n    case UPDATE_TASK_SUCCESS:\n      return state.merge({\n        deleted: null,\n        previous: null,\n        list: state.list.map(task => {\n          return task.key === payload.key ? payload : task;\n        })\n      });\n\n    case SIGN_OUT_SUCCESS:\n      return new TasksState();\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/diego.maranges/Documents/Scout/Scout-Page/CicleScout/ciclescout/src/tasks/reducer.js"],"names":["List","Record","SIGN_OUT_SUCCESS","CREATE_TASK_SUCCESS","REMOVE_TASK_SUCCESS","FILTER_TASKS","LOAD_TASKS_SUCCESS","UPDATE_TASK_SUCCESS","TasksState","deleted","filter","list","previous","tasksReducer","state","payload","type","merge","key","unshift","task","set","filterType","reverse","map"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,QAA6B,WAA7B;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,YAHF,EAIEC,kBAJF,EAKEC,mBALF,QAMO,gBANP;AASA,OAAO,MAAMC,UAAU,GAAG,IAAIP,MAAJ,CAAW;AACnCQ,EAAAA,OAAO,EAAE,IAD0B;AAEnCC,EAAAA,MAAM,EAAE,EAF2B;AAGnCC,EAAAA,IAAI,EAAE,IAAIX,IAAJ,EAH6B;AAInCY,EAAAA,QAAQ,EAAE;AAJyB,CAAX,CAAnB;AAQP,OAAO,SAASC,YAAT,CAAsBC,KAAK,GAAG,IAAIN,UAAJ,EAA9B,EAAgD;AAACO,EAAAA,OAAD;AAAUC,EAAAA;AAAV,CAAhD,EAAiE;AACtE,UAAQA,IAAR;AACE,SAAKb,mBAAL;AACE,aAAOW,KAAK,CAACG,KAAN,CAAY;AACjBR,QAAAA,OAAO,EAAE,IADQ;AAEjBG,QAAAA,QAAQ,EAAE,IAFO;AAGjBD,QAAAA,IAAI,EAAEG,KAAK,CAACL,OAAN,IAAiBK,KAAK,CAACL,OAAN,CAAcS,GAAd,KAAsBH,OAAO,CAACG,GAA/C,GACAJ,KAAK,CAACF,QADN,GAEAE,KAAK,CAACH,IAAN,CAAWQ,OAAX,CAAmBJ,OAAnB;AALW,OAAZ,CAAP;;AAQF,SAAKX,mBAAL;AACE,aAAOU,KAAK,CAACG,KAAN,CAAY;AACjBR,QAAAA,OAAO,EAAEM,OADQ;AAEjBH,QAAAA,QAAQ,EAAEE,KAAK,CAACH,IAFC;AAGjBA,QAAAA,IAAI,EAAEG,KAAK,CAACH,IAAN,CAAWD,MAAX,CAAkBU,IAAI,IAAIA,IAAI,CAACF,GAAL,KAAaH,OAAO,CAACG,GAA/C;AAHW,OAAZ,CAAP;;AAMF,SAAKb,YAAL;AACE,aAAOS,KAAK,CAACO,GAAN,CAAU,QAAV,EAAoBN,OAAO,CAACO,UAAR,IAAsB,EAA1C,CAAP;;AAEF,SAAKhB,kBAAL;AACE,aAAOQ,KAAK,CAACO,GAAN,CAAU,MAAV,EAAkB,IAAIrB,IAAJ,CAASe,OAAO,CAACQ,OAAR,EAAT,CAAlB,CAAP;;AAEF,SAAKhB,mBAAL;AACE,aAAOO,KAAK,CAACG,KAAN,CAAY;AACjBR,QAAAA,OAAO,EAAE,IADQ;AAEjBG,QAAAA,QAAQ,EAAE,IAFO;AAGjBD,QAAAA,IAAI,EAAEG,KAAK,CAACH,IAAN,CAAWa,GAAX,CAAeJ,IAAI,IAAI;AAC3B,iBAAOA,IAAI,CAACF,GAAL,KAAaH,OAAO,CAACG,GAArB,GAA2BH,OAA3B,GAAqCK,IAA5C;AACD,SAFK;AAHW,OAAZ,CAAP;;AAQF,SAAKlB,gBAAL;AACE,aAAO,IAAIM,UAAJ,EAAP;;AAEF;AACE,aAAOM,KAAP;AApCJ;AAsCD","sourcesContent":["import { List, Record } from 'immutable';\nimport { SIGN_OUT_SUCCESS } from 'src/auth/action-types';\nimport {\n  CREATE_TASK_SUCCESS,\n  REMOVE_TASK_SUCCESS,\n  FILTER_TASKS,\n  LOAD_TASKS_SUCCESS,\n  UPDATE_TASK_SUCCESS\n} from './action-types';\n\n\nexport const TasksState = new Record({\n  deleted: null,\n  filter: '',\n  list: new List(),\n  previous: null\n});\n\n\nexport function tasksReducer(state = new TasksState(), {payload, type}) {\n  switch (type) {\n    case CREATE_TASK_SUCCESS:\n      return state.merge({\n        deleted: null,\n        previous: null,\n        list: state.deleted && state.deleted.key === payload.key ?\n              state.previous :\n              state.list.unshift(payload)\n      });\n\n    case REMOVE_TASK_SUCCESS:\n      return state.merge({\n        deleted: payload,\n        previous: state.list,\n        list: state.list.filter(task => task.key !== payload.key)\n      });\n\n    case FILTER_TASKS:\n      return state.set('filter', payload.filterType || '');\n\n    case LOAD_TASKS_SUCCESS:\n      return state.set('list', new List(payload.reverse()));\n\n    case UPDATE_TASK_SUCCESS:\n      return state.merge({\n        deleted: null,\n        previous: null,\n        list: state.list.map(task => {\n          return task.key === payload.key ? payload : task;\n        })\n      });\n\n    case SIGN_OUT_SUCCESS:\n      return new TasksState();\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}