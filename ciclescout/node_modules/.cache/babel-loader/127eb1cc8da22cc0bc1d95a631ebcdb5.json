{"ast":null,"code":"var _jsxFileName = \"/Users/diego.maranges/Documents/Scout/Scout-Page/todo-react-redux/src/views/components/task-form/task-form.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './task-form.css';\nexport class TaskForm extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      title: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  clearInput() {\n    this.setState({\n      title: ''\n    });\n  }\n\n  handleChange(event) {\n    this.setState({\n      title: event.target.value\n    });\n  }\n\n  handleKeyUp(event) {\n    if (event.keyCode === 27) this.clearInput();\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const title = this.state.title.trim();\n    if (title.length) this.props.handleSubmit(title);\n    this.clearInput();\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"task-form\",\n      onSubmit: this.handleSubmit,\n      noValidate: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      autoComplete: \"off\",\n      autoFocus: true,\n      className: \"task-form__input\",\n      maxLength: \"64\",\n      onChange: this.handleChange,\n      onKeyUp: this.handleKeyUp,\n      placeholder: \"What needs to be done?\",\n      ref: e => this.titleInput = e,\n      type: \"text\",\n      value: this.state.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }));\n  }\n\n}\nTaskForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired\n};\nexport default TaskForm;","map":{"version":3,"sources":["/Users/diego.maranges/Documents/Scout/Scout-Page/todo-react-redux/src/views/components/task-form/task-form.js"],"names":["React","Component","PropTypes","TaskForm","constructor","arguments","state","title","handleChange","bind","handleKeyUp","handleSubmit","clearInput","setState","event","target","value","keyCode","preventDefault","trim","length","props","render","e","titleInput","propTypes","func","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,iBAAP;AAGA,OAAO,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAKtCG,EAAAA,WAAW,GAAG;AACZ,UAAM,GAAGC,SAAT;AAEA,SAAKC,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAb;AAEA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDG,EAAAA,UAAU,GAAG;AACX,SAAKC,QAAL,CAAc;AAACN,MAAAA,KAAK,EAAE;AAAR,KAAd;AACD;;AAEDC,EAAAA,YAAY,CAACM,KAAD,EAAQ;AAClB,SAAKD,QAAL,CAAc;AAACN,MAAAA,KAAK,EAAEO,KAAK,CAACC,MAAN,CAAaC;AAArB,KAAd;AACD;;AAEDN,EAAAA,WAAW,CAACI,KAAD,EAAQ;AACjB,QAAIA,KAAK,CAACG,OAAN,KAAkB,EAAtB,EAA0B,KAAKL,UAAL;AAC3B;;AAEDD,EAAAA,YAAY,CAACG,KAAD,EAAQ;AAClBA,IAAAA,KAAK,CAACI,cAAN;AACA,UAAMX,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAX,CAAiBY,IAAjB,EAAd;AACA,QAAIZ,KAAK,CAACa,MAAV,EAAkB,KAAKC,KAAL,CAAWV,YAAX,CAAwBJ,KAAxB;AAClB,SAAKK,UAAL;AACD;;AAEDU,EAAAA,MAAM,GAAG;AACP,WACE;AAAM,MAAA,SAAS,EAAC,WAAhB;AAA4B,MAAA,QAAQ,EAAE,KAAKX,YAA3C;AAAyD,MAAA,UAAU,MAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,YAAY,EAAC,KADf;AAEE,MAAA,SAAS,MAFX;AAGE,MAAA,SAAS,EAAC,kBAHZ;AAIE,MAAA,SAAS,EAAC,IAJZ;AAKE,MAAA,QAAQ,EAAE,KAAKH,YALjB;AAME,MAAA,OAAO,EAAE,KAAKE,WANhB;AAOE,MAAA,WAAW,EAAC,wBAPd;AAQE,MAAA,GAAG,EAAEa,CAAC,IAAI,KAAKC,UAAL,GAAkBD,CAR9B;AASE,MAAA,IAAI,EAAC,MATP;AAUE,MAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWC,KAVpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAgBD;;AAnDqC;AAA3BJ,Q,CACJsB,S,GAAY;AACjBd,EAAAA,YAAY,EAAET,SAAS,CAACwB,IAAV,CAAeC;AADZ,C;AAsDrB,eAAexB,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './task-form.css';\n\n\nexport class TaskForm extends Component {\n  static propTypes = {\n    handleSubmit: PropTypes.func.isRequired\n  };\n\n  constructor() {\n    super(...arguments);\n\n    this.state = {title: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  clearInput() {\n    this.setState({title: ''});\n  }\n\n  handleChange(event) {\n    this.setState({title: event.target.value});\n  }\n\n  handleKeyUp(event) {\n    if (event.keyCode === 27) this.clearInput();\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const title = this.state.title.trim();\n    if (title.length) this.props.handleSubmit(title);\n    this.clearInput();\n  }\n\n  render() {\n    return (\n      <form className=\"task-form\" onSubmit={this.handleSubmit} noValidate>\n        <input\n          autoComplete=\"off\"\n          autoFocus\n          className=\"task-form__input\"\n          maxLength=\"64\"\n          onChange={this.handleChange}\n          onKeyUp={this.handleKeyUp}\n          placeholder=\"What needs to be done?\"\n          ref={e => this.titleInput = e}\n          type=\"text\"\n          value={this.state.title}\n        />\n      </form>\n    );\n  }\n}\n\n\nexport default TaskForm;\n"]},"metadata":{},"sourceType":"module"}