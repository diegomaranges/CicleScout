{"ast":null,"code":"var _jsxFileName = \"/Users/diego.maranges/Documents/Scout/Scout-Page/CicleScout/ciclescout/src/views/components/task-item/task-item.js\";\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport Button from '../button';\nimport Icon from '../icon';\nimport './task-item.css';\nexport class TaskItem extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      editing: false\n    };\n    this.edit = this.edit.bind(this);\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n    this.remove = this.remove.bind(this);\n    this.save = this.save.bind(this);\n    this.stopEditing = this.stopEditing.bind(this);\n    this.toggleStatus = this.toggleStatus.bind(this);\n  }\n\n  edit() {\n    this.setState({\n      editing: true\n    });\n  }\n\n  handleKeyUp(event) {\n    if (event.keyCode === 13) {\n      this.save(event);\n    } else if (event.keyCode === 27) {\n      this.stopEditing();\n    }\n  }\n\n  remove() {\n    this.props.removeTask(this.props.task);\n  }\n\n  save(event) {\n    if (this.state.editing) {\n      const task = this.props.task;\n      const title = event.target.value.trim();\n\n      if (title.length && title !== task.title) {\n        this.props.updateTask(task, {\n          title\n        });\n      }\n\n      this.stopEditing();\n    }\n  }\n\n  stopEditing() {\n    this.setState({\n      editing: false\n    });\n  }\n\n  toggleStatus() {\n    const task = this.props.task;\n    this.props.updateTask(task, {\n      completed: !task.completed\n    });\n  }\n\n  renderTitle(task) {\n    return React.createElement(\"div\", {\n      className: \"task-item__title\",\n      tabIndex: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, task.title);\n  }\n\n  renderTitleInput(task) {\n    return React.createElement(\"input\", {\n      autoComplete: \"off\",\n      autoFocus: true,\n      className: \"task-item__input\",\n      defaultValue: task.title,\n      maxLength: \"64\",\n      onKeyUp: this.handleKeyUp,\n      type: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    const editing = this.state.editing;\n    const task = this.props.task;\n    let containerClasses = classNames('task-item', {\n      'task-item--completed': task.completed,\n      'task-item--editing': editing\n    });\n    return React.createElement(\"div\", {\n      className: containerClasses,\n      tabIndex: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"cell\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: classNames('btn--icon', 'task-item__button', {\n        'active': task.completed,\n        'hide': editing\n      }),\n      onClick: this.toggleStatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"done\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"cell\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, editing ? this.renderTitleInput(task) : this.renderTitle(task)), React.createElement(\"div\", {\n      className: \"cell\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: classNames('btn--icon', 'task-item__button', {\n        'hide': editing\n      }),\n      onClick: this.edit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"mode_edit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })), React.createElement(Button, {\n      className: classNames('btn--icon', 'task-item__button', {\n        'hide': !editing\n      }),\n      onClick: this.stopEditing,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"clear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })), React.createElement(Button, {\n      className: classNames('btn--icon', 'task-item__button', {\n        'hide': editing\n      }),\n      onClick: this.remove,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"delete\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }))));\n  }\n\n}\nTaskItem.propTypes = {\n  removeTask: PropTypes.func.isRequired,\n  task: PropTypes.object.isRequired,\n  updateTask: PropTypes.func.isRequired\n};\nexport default TaskItem;","map":{"version":3,"sources":["/Users/diego.maranges/Documents/Scout/Scout-Page/CicleScout/ciclescout/src/views/components/task-item/task-item.js"],"names":["React","Component","classNames","PropTypes","Button","Icon","TaskItem","constructor","arguments","state","editing","edit","bind","handleKeyUp","remove","save","stopEditing","toggleStatus","setState","event","keyCode","props","removeTask","task","title","target","value","trim","length","updateTask","completed","renderTitle","renderTitleInput","render","containerClasses","propTypes","func","isRequired","object"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport Button from '../button';\nimport Icon from '../icon';\n\nimport './task-item.css';\n\n\nexport class TaskItem extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.state = {editing: false};\n\n    this.edit = this.edit.bind(this);\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n    this.remove = this.remove.bind(this);\n    this.save = this.save.bind(this);\n    this.stopEditing = this.stopEditing.bind(this);\n    this.toggleStatus = this.toggleStatus.bind(this);\n  }\n\n  edit() {\n    this.setState({editing: true});\n  }\n\n  handleKeyUp(event) {\n    if (event.keyCode === 13) {\n      this.save(event);\n    }\n    else if (event.keyCode === 27) {\n      this.stopEditing();\n    }\n  }\n\n  remove() {\n    this.props.removeTask(this.props.task);\n  }\n\n  save(event) {\n    if (this.state.editing) {\n      const { task } = this.props;\n      const title = event.target.value.trim();\n\n      if (title.length && title !== task.title) {\n        this.props.updateTask(task, {title});\n      }\n\n      this.stopEditing();\n    }\n  }\n\n  stopEditing() {\n    this.setState({editing: false});\n  }\n\n  toggleStatus() {\n    const { task } = this.props;\n    this.props.updateTask(task, {completed: !task.completed});\n  }\n\n  renderTitle(task) {\n    return (\n      <div className=\"task-item__title\" tabIndex=\"0\">\n        {task.title}\n      </div>\n    );\n  }\n\n  renderTitleInput(task) {\n    return (\n      <input\n        autoComplete=\"off\"\n        autoFocus\n        className=\"task-item__input\"\n        defaultValue={task.title}\n        maxLength=\"64\"\n        onKeyUp={this.handleKeyUp}\n        type=\"text\"\n      />\n    );\n  }\n\n  render() {\n    const { editing } = this.state;\n    const { task } = this.props;\n\n    let containerClasses = classNames('task-item', {\n      'task-item--completed': task.completed,\n      'task-item--editing': editing\n    });\n\n    return (\n      <div className={containerClasses} tabIndex=\"0\">\n        <div className=\"cell\">\n          <Button\n            className={classNames('btn--icon', 'task-item__button', {'active': task.completed, 'hide': editing})}\n            onClick={this.toggleStatus}>\n            <Icon name=\"done\" />\n          </Button>\n        </div>\n\n        <div className=\"cell\">\n          {editing ? this.renderTitleInput(task) : this.renderTitle(task)}\n        </div>\n\n        <div className=\"cell\">\n          <Button\n            className={classNames('btn--icon', 'task-item__button', {'hide': editing})}\n            onClick={this.edit}>\n            <Icon name=\"mode_edit\" />\n          </Button>\n          <Button\n            className={classNames('btn--icon', 'task-item__button', {'hide': !editing})}\n            onClick={this.stopEditing}>\n            <Icon name=\"clear\" />\n          </Button>\n          <Button\n            className={classNames('btn--icon', 'task-item__button', {'hide': editing})}\n            onClick={this.remove}>\n            <Icon name=\"delete\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nTaskItem.propTypes = {\n  removeTask: PropTypes.func.isRequired,\n  task: PropTypes.object.isRequired,\n  updateTask: PropTypes.func.isRequired\n};\n\n\nexport default TaskItem;\n"]},"metadata":{},"sourceType":"module"}